{
  "task_name": "place_phone_stand",
  "task_description": "Pick up the phone and put it on the phone stand.                        Grasp the phone with specified arm. Place the phone onto the stand's functional point and align the points.",
  "best_success_rate": 0.5,
  "success_rates": [
    0.5
  ],
  "best_code": "\nfrom envs._base_task import Base_Task\nfrom envs.place_phone_stand import place_phone_stand\nfrom envs.utils import *\nimport sapien\n\nclass gpt_place_phone_stand(place_phone_stand):\n    def play_once(self):\n        PLACEHOLDER=None\n        object= self.phone\n        pre_grasp_dis=0.1\n        grasp_dis=0\n        contract_point_id_grasp=0\n        move_by_displacement_z=0.07\n        target= self.stand\n        target_func_point_id=0\n        functional_point_id=0\n        place_pre_dis=0.1\n        place_dis=0.02\n\n        object_pose = object.get_pose().p\n        target_pose = target.get_functional_point(target_func_point_id)\n        self.arm_tag = ArmTag(\"right\" if object_pose[0] > 0 else \"left\")\n\n        self.move(\n            self.grasp_actor(\n                object,\n                arm_tag=self.arm_tag,\n                contact_point_id=contract_point_id_grasp,\n                pre_grasp_dis=pre_grasp_dis,\n                grasp_dis=grasp_dis,\n            ))\n        self.move(self.move_by_displacement(self.arm_tag, z=move_by_displacement_z, move_axis=\"arm\"))\n\n        self.move(\n            self.place_actor(\n                object,\n                arm_tag=self.arm_tag,\n                target_pose=target_pose,\n                pre_dis=place_pre_dis,\n                dis=place_dis,\n                functional_point_id=functional_point_id,\n            ))\n        self.move(self.move_by_displacement(self.arm_tag, z=0.1, move_axis=\"arm\"))\n",
  "best_run_records": [
    "The target position of the object is incorrect.",
    "The target position of the object is incorrect.",
    "success!",
    "success!",
    "Plan execution failed",
    "success!",
    "Plan execution failed",
    "Plan execution failed",
    "success!",
    "success!"
  ],
  "all_attempts": [
    {
      "attempt_id": 1,
      "success_rate": 0.5,
      "error_message": "Plan execution failed",
      "error_count": 3,
      "code": "\nfrom envs._base_task import Base_Task\nfrom envs.place_phone_stand import place_phone_stand\nfrom envs.utils import *\nimport sapien\n\nclass gpt_place_phone_stand(place_phone_stand):\n    def play_once(self):\n        PLACEHOLDER=None\n        object= self.phone\n        pre_grasp_dis=0.1\n        grasp_dis=0\n        contract_point_id_grasp=0\n        move_by_displacement_z=0.07\n        target= self.stand\n        target_func_point_id=0\n        functional_point_id=0\n        place_pre_dis=0.1\n        place_dis=0.02\n\n        object_pose = object.get_pose().p\n        target_pose = target.get_functional_point(target_func_point_id)\n        self.arm_tag = ArmTag(\"right\" if object_pose[0] > 0 else \"left\")\n\n        self.move(\n            self.grasp_actor(\n                object,\n                arm_tag=self.arm_tag,\n                contact_point_id=contract_point_id_grasp,\n                pre_grasp_dis=pre_grasp_dis,\n                grasp_dis=grasp_dis,\n            ))\n        self.move(self.move_by_displacement(self.arm_tag, z=move_by_displacement_z, move_axis=\"arm\"))\n\n        self.move(\n            self.place_actor(\n                object,\n                arm_tag=self.arm_tag,\n                target_pose=target_pose,\n                pre_dis=place_pre_dis,\n                dis=place_dis,\n                functional_point_id=functional_point_id,\n            ))\n        self.move(self.move_by_displacement(self.arm_tag, z=0.1, move_axis=\"arm\"))\n",
      "run_records": [
        "The target position of the object is incorrect.",
        "The target position of the object is incorrect.",
        "success!",
        "success!",
        "Plan execution failed",
        "success!",
        "Plan execution failed",
        "Plan execution failed",
        "success!",
        "success!"
      ]
    }
  ]
}